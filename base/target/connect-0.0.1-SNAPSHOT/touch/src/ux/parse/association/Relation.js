Ext.define("Ext.ux.parse.association.Relation",{extend:"Ext.data.association.Association",alias:"association.relation",config:{store:undefined,storeName:undefined,autoLoad:false,autoSync:false},getStore:function(a){if(a[this.getName()]){return a[this.getName()]()}return null},getData:function(c){var b=[],a=this.getStore(c);if(a){var e=a.getData(),d;e.each(function(f){d=f.isParseModel?f.getDataFlat():f.getData();b.push(d)})}return b},getStatus:function(b){var a=this.getStore(b);if(a){if(a.isLoaded()){return"loaded"}else{if(a.isLoading()){return"loading"}}}return"unloaded"},applyAssociationKey:function(a){if(!a){var b=this.getName();a=b.toLowerCase()}return a},applyName:function(a){if(!a){a=Ext.util.Inflector.pluralize(this.getAssociatedName().toLowerCase())}return a},applyStoreName:function(a){if(!a){a=this.getName()+"Store"}return a},applyStore:function(e){var d=this,f=d.getAssociatedModel(),c=d.getStoreName(),b=d.getAutoLoad(),a=d.getAutoSync();return function(){var g=this,i,h,j={addrecords:d.onAddRecords,removerecords:d.onRemoveRecords,write:d.onStoreWrite,scope:d};if(g[c]===undefined){i=Ext.apply({},e,{model:f,params:{query:function(){return g.$parseObject.relation(d.getName()).query()}},autoSync:a,listeners:j});h=g[c]=Ext.create("Ext.data.Store",i);h.boundTo=g;if(b){g[c].load()}}return g[c]}},updateStore:function(a){this.getOwnerModel().prototype[this.getName()]=a},read:function(b,a,e){var d=b[this.getName()](),c=a.read(e).getRecords();d.add(c)},onAddRecords:function(b,a){this.syncRelation(b,"create",a)},onRemoveRecords:function(b,a){this.syncRelation(b,"destroy",a)},onStoreWrite:function(b,a){this.syncRelation(b,a.getAction(),a.getRecords())},syncRelation:function(l,k,c){if(k!="create"&&k!="destroy"){return}var g=l.boundTo,d=g.getParseObject(),m=k=="destroy"?"remove":"add",a=false,h=c.length,e,f,j,b=d.relation(this.getName());for(e=0;e<h;e++){f=c[e];if(f.isParseModel){j=f.getParseObject();if(!j.isNew()){b[m].call(b,j);a=true}else{if(k==="create"){Ext.Logger.warn("You cannot make relationships to Models that do not exist on parse. Save this model Prior to adding, record will be removed");l.remove(f)}}}}if(!g.dirty&&a){g.setDirty(a)}}});