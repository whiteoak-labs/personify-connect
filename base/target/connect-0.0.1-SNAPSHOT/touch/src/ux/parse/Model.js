Ext.define("Ext.ux.parse.Model",{extend:"Ext.data.Model",requires:["Ext.ux.parse.Helper","Ext.ux.parse.Proxy","Ext.Promise","Ext.ux.parse.association.Pointer","Ext.ux.parse.association.Relation"],config:{proxy:"parse"},inheritableStatics:{getParseClass:function(){if(!this.$parseClass){this.$parseClass=this.getName().split(".").pop()}return this.$parseClass}},isParseModel:true,$parseObject:null,getParseObject:function(){return this.$parseObject},setParseObject:function(a){this.$parseObject=a},$parseClass:null,getParseClass:function(){if(!this.$parseClass){var a=Ext.ModelManager.getModel(this.$className);this.$parseClass=a.getParseClass()}return this.$parseClass},constructor:function(c,e,a,d){if(c instanceof Parse.Object){this.setParseObject(c);e=e||c.id||null;c=c.attributes}else{var b=a||c||{};e=b.id||e||null;this.setParseObject(ParseHelper.getObject(this.getParseClass(),b))}return this.callParent([c,e,a,d])},monitorRelations:function(a){a=a||{};var c=this,e=new Ext.Promise,f=a.callback||Ext.emptyFn,b=a.scope||this;(function d(){var h=c.getRelationsStatus();if(h.loading){var g=h.loading.shift(),i=g.getStore(c);i.on("load",d,c,{single:true})}else{e.fulfill();f.apply(b)}})();return e},getRelationsStatus:function(){var e=this,b={relations:{}},d=this.getAssociations(),c,a;d.each(function(f){if(f.getType()==="relation"&&f.getStatus){c=f.getStatus(e);a=f.getStore(e);if(!Ext.isArray(b[c])){b[c]=[]}b[c].push(f);b.relations[f.getName()]={store:a,status:c}}});return b},relationsLoaded:function(){var c=this.getAssociations(),b=true,a;c.each(function(d){if(d.getType()==="relation"&&d.getStatus){a=d.getStatus(this);b=status==="loading"||status==="unloaded"}});return b},getDataFlat:function(){var b=this,c=Ext.merge({},this.data),a=this.getAssociations();a.each(function(d){if(d.getData){c[d.getName()]=d.getData(b)}});return c},load:function(b){b=b||{};var c=this,d=c.get("id")||b.id||null;if(d&&d.indexOf("ext-record")===-1){var a=Ext.ModelManager.getModel(c.$className);a.load(d,{success:function(e,f){c.syncParse(c.getFields().all);if(b.success){b.success.apply(b.scope||c,[c,f])}},failure:function(e,f){if(b.failure){b.failure.apply(b.scope||c,[c,f])}}})}else{Ext.Logger.warn("You cannot load Parse models without a Parse ID")}},syncParse:function(a){var b=this,c;Ext.Array.forEach(a,function(d){if(d.isField){c=b.get(d.getName());d=d.getName()}else{c=b.get(d)}if(c&&c.isParseModel){c=c.getParseObject()}b.$parseObject.set(d,c)})},afterEdit:function(b,a){this.callParent(arguments);this.syncParse(b)},set:function(o,k){var h=this,b=h.fields.map,n=h.modified,a=!h.editing,e=0,c=[],j,m,d,f,l,g;if(arguments.length==1){for(m in o){if(o.hasOwnProperty(m)){j=b[m];if(j&&j.hasCustomConvert()){c.push(m);continue}if(!e&&a){h.beginEdit()}++e;if(!j){j=this.get(m)}if(j&&j.isModel){j.set(o[m])}else{h.set(m,o[m])}}}f=c.length;if(f){if(!e&&a){h.beginEdit()}e+=f;for(d=0;d<f;d++){j=c[d];h.set(j,o[j])}h.dirty=true}if(a&&e){h.endEdit(false,c)}}else{if(n){j=b[o];g=j&&j.getConvert();if(g){k=g.call(j,k,h)}l=h.data[o];if(l&&l!=k){h.fireEvent("fieldupdate",this,k,o)}h.data[o]=k;if(j&&!h.isEqual(l,k)){if(n.hasOwnProperty(o)){if(h.isEqual(n[o],k)){delete n[o];h.dirty=false;for(m in n){if(n.hasOwnProperty(m)){h.dirty=true;break}}}}else{h.dirty=true;n[o]=l}}if(a){h.afterEdit([o],n)}}}if(this.dirty){this.fireEvent("dirty",this)}}});