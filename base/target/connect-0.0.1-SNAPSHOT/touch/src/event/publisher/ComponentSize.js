Ext.define("Ext.event.publisher.ComponentSize",{extend:"Ext.event.publisher.Publisher",requires:["Ext.ComponentManager"],targetType:"component",handledEvents:["resize","innerresize"],constructor:function(){this.callParent(arguments);this.sizeMonitors={}},getSubscribers:function(c,a){var b=this.subscribers;if(!b.hasOwnProperty(c)){if(!a){return null}b[c]={$length:0}}return b[c]},subscribe:function(g,f){var e=g.match(this.idSelectorRegex),d=this.sizeMonitors,i=this.dispatcher,b=this.targetType,a,h,c;if(!e){return false}c=e[1];a=this.getSubscribers(g,true);a.$length++;if(a.hasOwnProperty(f)){a[f]++;return true}if(a.$length===1){i.addListener(b,g,"painted","onComponentPainted",this,null,"before")}h=Ext.ComponentManager.get(c);if(!h){Ext.Logger.error("Adding a listener to the 'resize' event of a non-existing component")}if(!d[g]){d[g]={}}d[g][f]=new Ext.util.SizeMonitor({element:f==="resize"?h.element:h.innerElement,callback:this.onComponentSizeChange,scope:this,args:[this,g,f]});a[f]=1;return true},unsubscribe:function(g,f,h){var e=g.match(this.idSelectorRegex),i=this.dispatcher,b=this.targetType,d=this.sizeMonitors,a,c;if(!e||!(a=this.getSubscribers(g))){return false}c=e[1];if(!a.hasOwnProperty(f)||(!h&&--a[f]>0)){return true}delete a[f];d[g][f].destroy();delete d[g][f];if(--a.$length===0){delete d[g];delete this.subscribers[g];i.removeListener(b,g,"painted","onComponentPainted",this,"before")}return true},onComponentPainted:function(b){var c=b.getObservableId(),a=this.sizeMonitors[c];if(a.resize){a.resize.refresh()}if(a.innerresize){a.innerresize.refresh()}},onComponentSizeChange:function(b,c,a){this.dispatcher.doDispatchEvent(this.targetType,c,a,[b])}});