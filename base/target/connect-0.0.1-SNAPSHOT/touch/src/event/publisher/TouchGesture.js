Ext.define("Ext.event.publisher.TouchGesture",{extend:"Ext.event.publisher.Dom",requires:["Ext.util.Point","Ext.event.Touch","Ext.AnimationQueue"],isNotPreventable:/^(select|a)$/i,handledEvents:["touchstart","touchmove","touchend","touchcancel"],mouseToTouchMap:{mousedown:"touchstart",mousemove:"touchmove",mouseup:"touchend"},lastEventType:null,config:{moveThrottle:0,recognizers:{}},constructor:function(a){var b=this;this.eventProcessors={touchstart:this.onTouchStart,touchmove:this.onTouchMove,touchend:this.onTouchEnd,touchcancel:this.onTouchEnd};this.eventToRecognizerMap={};this.activeRecognizers=[];this.touchesMap={};this.currentIdentifiers=[];if(Ext.browser.is.Chrome&&Ext.os.is.Android){this.screenPositionRatio=Ext.browser.version.gt("18")?1:1/window.devicePixelRatio}else{if(Ext.browser.is.AndroidStock4){this.screenPositionRatio=1}else{if(Ext.os.is.BlackBerry){this.screenPositionRatio=1/window.devicePixelRatio}else{if(Ext.browser.engineName=="WebKit"&&Ext.os.is.Desktop){this.screenPositionRatio=1}else{this.screenPositionRatio=window.innerWidth/window.screen.width}}}}this.initConfig(a);if(Ext.feature.has.Touch){b.onTargetTouchMove=b.onTargetTouchMove.bind(b);b.onTargetTouchEnd=b.onTargetTouchEnd.bind(b)}return this.callSuper()},applyRecognizers:function(b){var c,a;for(c in b){if(b.hasOwnProperty(c)){a=b[c];if(a){this.registerRecognizer(a)}}}return b},handles:function(a){return this.callSuper(arguments)||this.eventToRecognizerMap.hasOwnProperty(a)},doesEventBubble:function(){return true},onEvent:function(f){var d=f.type,b=this.lastEventType,c=[f];if(this.eventProcessors[d]){this.eventProcessors[d].call(this,f);return}if("button" in f&&f.button>0){return}else{if(d==="mousedown"&&b&&b!=="mouseup"){var a=document.createEvent("MouseEvent");a.initMouseEvent("mouseup",f.bubbles,f.cancelable,document.defaultView,f.detail,f.screenX,f.screenY,f.clientX,f.clientY,f.ctrlKey,f.altKey,f.shiftKey,f.metaKey,f.metaKey,f.button,f.relatedTarget);this.onEvent(a)}if(d!=="mousemove"){this.lastEventType=d}f.identifier=1;f.touches=(d!=="mouseup")?c:[];f.targetTouches=(d!=="mouseup")?c:[];f.changedTouches=c;this.eventProcessors[this.mouseToTouchMap[d]].call(this,f)}},registerRecognizer:function(a){var g=this.eventToRecognizerMap,e=this.activeRecognizers,c=a.getHandledEvents(),d,f,b;a.setOnRecognized(this.onRecognized);a.setCallbackScope(this);for(d=0,f=c.length;d<f;d++){b=c[d];g[b]=a}e.push(a);return this},onRecognized:function(f,h,d,a){var k=[],j=d.length,g,c,b;if(j===1){return this.publish(f,d[0].targets,h,a)}for(c=0;c<j;c++){b=d[c];k.push(b.targets)}g=this.getCommonTargets(k);this.publish(f,g,h,a)},publish:function(b,a,c,d){c.set(d);return this.callSuper([b,a,c])},getCommonTargets:function(a){var h=a[0],f=a.length;if(f===1){return h}var d=[],e=1,g,b,c;while(true){g=h[h.length-e];if(!g){return d}for(c=1;c<f;c++){b=a[c];if(b[b.length-e]!==g){return d}}d.unshift(g);e++}return d},invokeRecognizers:function(c,g){var b=this.activeRecognizers,f=b.length,d,a;if(c==="onStart"){for(d=0;d<f;d++){b[d].isActive=true}}for(d=0;d<f;d++){a=b[d];if(a.isActive&&a[c].call(a,g)===false){a.isActive=false}}},getActiveRecognizers:function(){return this.activeRecognizers},updateTouch:function(f){var b=f.identifier,d=this.touchesMap[b],c,a,e;if(!d){c=this.getElementTarget(f.target);this.touchesMap[b]=d={identifier:b,target:c,targets:this.getBubblingTargets(c)};this.currentIdentifiers.push(b)}a=f.pageX;e=f.pageY;if(a===d.pageX&&e===d.pageY){return false}d.pageX=a;d.pageY=e;d.timeStamp=f.timeStamp;d.point=new Ext.util.Point(a,e);return d},updateTouches:function(d){var a,c,e,b=[];for(a=0,c=d.length;a<c;a++){e=this.updateTouch(d[a]);if(e){b.push(e)}}return b},syncTouches:function(e){var b=[],a=e.length,c,g,f,d;for(c=0;c<a;c++){f=e[c];b.push(f.identifier)}d=Ext.Array.difference(this.currentIdentifiers,b);a=d.length;for(c=0;c<a;c++){g=d[c];Ext.Array.remove(this.currentIdentifiers,g);delete this.touchesMap[g]}},factoryEvent:function(a){return new Ext.event.Touch(a,null,this.touchesMap,this.currentIdentifiers)},onTouchStart:function(g){var l=g.changedTouches,h=g.target,f=g.touches,j=l.length,a=this.isNotPreventable,b=(g.type==="touchstart"),k=this,d,c,m;if(f&&f.length<this.currentIdentifiers.length+1){this.syncTouches(f)}this.updateTouches(l);g=this.factoryEvent(g);l=g.changedTouches;if(Ext.browser.is.AndroidStock&&this.currentIdentifiers.length>=2){g.preventDefault()}if(b){h.addEventListener("touchmove",k.onTargetTouchMove);h.addEventListener("touchend",k.onTargetTouchEnd);h.addEventListener("touchcancel",k.onTargetTouchEnd)}for(d=0;d<j;d++){c=l[d];this.publish("touchstart",c.targets,g,{touch:c})}if(!this.isStarted){this.isStarted=true;this.invokeRecognizers("onStart",g)}this.invokeRecognizers("onTouchStart",g);m=h.parentNode||{}},onTouchMove:function(a){if(!this.isStarted){return}if(!this.animationQueued){this.animationQueued=true;Ext.AnimationQueue.start("onAnimationFrame",this)}this.lastMoveEvent=a},onAnimationFrame:function(){var a=this.lastMoveEvent;if(a){this.lastMoveEvent=null;this.doTouchMove(a)}},doTouchMove:function(d){var b,a,c,f;b=this.updateTouches(d.changedTouches);c=b.length;d=this.factoryEvent(d);for(a=0;a<c;a++){f=b[a];this.publish("touchmove",f.targets,d,{touch:f})}if(c>0){this.invokeRecognizers("onTouchMove",d)}},onTouchEnd:function(h){if(!this.isStarted){return}if(this.lastMoveEvent){this.onAnimationFrame()}var a=this.touchesMap,d=this.currentIdentifiers,f=h.changedTouches,g=f.length,b,c,j;this.updateTouches(f);f=h.changedTouches;for(c=0;c<g;c++){Ext.Array.remove(d,f[c].identifier)}h=this.factoryEvent(h);for(c=0;c<g;c++){b=f[c].identifier;j=a[b];delete a[b];this.publish("touchend",j.targets,h,{touch:j})}this.invokeRecognizers("onTouchEnd",h);if(h.touches&&h.touches.length===0&&d.length){d.length=0;this.touchesMap={}}if(d.length===0){this.isStarted=false;this.invokeRecognizers("onEnd",h);if(this.animationQueued){this.animationQueued=false;Ext.AnimationQueue.stop("onAnimationFrame",this)}}},onTargetTouchMove:function(a){if(!Ext.getBody().contains(a.target)){this.onTouchMove(a)}},onTargetTouchEnd:function(d){var b=this,c=d.target,a=0,f;for(identifier in this.touchesMap){f=this.touchesMap[identifier].target;if(f===c){a++}}if(a<=1){c.removeEventListener("touchmove",b.onTargetTouchMove);c.removeEventListener("touchend",b.onTargetTouchEnd);c.removeEventListener("touchcancel",b.onTargetTouchEnd)}if(!Ext.getBody().contains(c)){b.onTouchEnd(d)}}},function(){if(Ext.feature.has.Pointer){this.override({pointerToTouchMap:{MSPointerDown:"touchstart",MSPointerMove:"touchmove",MSPointerUp:"touchend",MSPointerCancel:"touchcancel",pointerdown:"touchstart",pointermove:"touchmove",pointerup:"touchend",pointercancel:"touchcancel"},touchToPointerMap:{touchstart:"MSPointerDown",touchmove:"MSPointerMove",touchend:"MSPointerUp",touchcancel:"MSPointerCancel"},attachListener:function(a,b){a=this.touchToPointerMap[a];if(!a){return}return this.callOverridden([a,b])},onEvent:function(b){var a=b.type;if(this.currentIdentifiers.length===0&&(b.pointerType===b.MSPOINTER_TYPE_TOUCH||b.pointerType==="touch")&&(a==="MSPointerMove"||a==="pointermove")){a="MSPointerDown"}if("button" in b&&b.button>0){return}a=this.pointerToTouchMap[a];b.identifier=b.pointerId;b.changedTouches=[b];this.eventProcessors[a].call(this,b)}})}else{if(!Ext.browser.is.Ripple&&(Ext.os.is.ChromeOS||!Ext.feature.has.Touch)){this.override({handledEvents:["touchstart","touchmove","touchend","touchcancel","mousedown","mousemove","mouseup"]})}}});