Ext.define("Ext.data.NodeStore",{extend:"Ext.data.Store",alias:"store.node",requires:["Ext.data.NodeInterface"],config:{node:null,recursive:false,rootVisible:false,sorters:undefined,filters:undefined,folderSort:false},afterEdit:function(a,b){if(b){if(b.indexOf("loaded")!==-1){return this.add(this.retrieveChildNodes(a))}if(b.indexOf("expanded")!==-1){return this.filter()}if(b.indexOf("sorted")!==-1){return this.sort()}}this.callParent(arguments)},onNodeAppend:function(a,b){this.add([b].concat(this.retrieveChildNodes(b)))},onNodeInsert:function(a,b){this.add([b].concat(this.retrieveChildNodes(b)))},onNodeRemove:function(a,b){this.remove([b].concat(this.retrieveChildNodes(b)))},onNodeSort:function(){this.sort()},updateFolderSort:function(a){if(a){this.setGrouper(function(b){if(b.isLeaf()){return 1}return 0})}else{this.setGrouper(null)}},createDataCollection:function(){var a=this.callParent();a.handleSort=Ext.Function.bind(this.handleTreeSort,this,[a],true);a.findInsertionIndex=Ext.Function.bind(this.handleTreeInsertionIndex,this,[a,a.findInsertionIndex],true);return a},handleTreeInsertionIndex:function(a,b,d,c){return c.call(d,a,b,this.treeSortFn)},handleTreeSort:function(a){Ext.Array.sort(a,this.treeSortFn);return a},treeSortFn:function(c,a){if(c.parentNode===a.parentNode){return(c.data.index<a.data.index)?-1:1}var f=0,e=0,d=c,b=a;while(d){f+=(Math.pow(10,(d.data.depth+1)*-4)*(d.data.index+1));d=d.parentNode}while(b){e+=(Math.pow(10,(b.data.depth+1)*-4)*(b.data.index+1));b=b.parentNode}if(f>e){return 1}else{if(f<e){return -1}}return(c.data.index>a.data.index)?1:-1},applyFilters:function(b){var a=this;return function(c){return a.isVisible(c)}},applyProxy:function(a){if(a){Ext.Logger.warn("A NodeStore cannot be bound to a proxy. Instead bind it to a record decorated with the NodeInterface by setting the node config.")}},applyNode:function(a){if(a){a=Ext.data.NodeInterface.decorate(a)}return a},updateNode:function(a,c){if(c&&!c.isDestroyed){c.un({append:"onNodeAppend",insert:"onNodeInsert",remove:"onNodeRemove",load:"onNodeLoad",scope:this});c.unjoin(this)}if(a){a.on({scope:this,append:"onNodeAppend",insert:"onNodeInsert",remove:"onNodeRemove",load:"onNodeLoad"});a.join(this);var b=[];if(a.childNodes.length){b=b.concat(this.retrieveChildNodes(a))}if(this.getRootVisible()){b.push(a)}else{if(a.isLoaded()||a.isLoading()){a.set("expanded",true)}}this.data.clear();this.fireEvent("clear",this);this.suspendEvents();this.add(b);this.resumeEvents();if(b.length===0){this.loaded=a.loaded=true}this.fireEvent("refresh",this,this.data)}},retrieveChildNodes:function(a){var d=this.getNode(),b=this.getRecursive(),c=[],e=a;if(!a.childNodes.length||(!b&&a!==d)){return c}if(!b){return a.childNodes}while(e){if(e._added){delete e._added;if(e===a){break}else{e=e.nextSibling||e.parentNode}}else{if(e!==a){c.push(e)}if(e.firstChild){e._added=true;e=e.firstChild}else{e=e.nextSibling||e.parentNode}}}return c},isVisible:function(b){var a=b.parentNode;if(!this.getRecursive()&&a!==this.getNode()){return false}while(a){if(!a.isExpanded()){return false}if(a===this.getNode()){break}a=a.parentNode}return true}});