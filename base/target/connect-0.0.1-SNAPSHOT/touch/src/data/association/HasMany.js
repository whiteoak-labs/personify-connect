Ext.define("Ext.data.association.HasMany",{extend:"Ext.data.association.Association",alternateClassName:"Ext.data.HasManyAssociation",requires:["Ext.util.Inflector"],alias:"association.hasmany",config:{foreignKey:undefined,store:undefined,storeName:undefined,filterProperty:null,autoLoad:false,autoSync:false},constructor:function(a){a=a||{};if(a.storeConfig){Ext.Logger.warn("storeConfig is deprecated on an association. Instead use the store configuration.");a.store=a.storeConfig;delete a.storeConfig}this.callParent([a])},applyName:function(a){if(!a){a=Ext.util.Inflector.pluralize(this.getAssociatedName().toLowerCase())}return a},applyStoreName:function(a){if(!a){a=this.getName()+"Store"}return a},applyForeignKey:function(b){if(!b){var a=this.getInverseAssociation();if(a){b=a.getForeignKey()}else{b=this.getOwnerName().toLowerCase()+"_id"}}return b},applyAssociationKey:function(a){if(!a){var b=this.getAssociatedName();a=Ext.util.Inflector.pluralize(b[0].toLowerCase()+b.slice(1))}return a},updateForeignKey:function(b,d){var a=this.getAssociatedModel().getFields(),c=a.get(b);if(!c){c=new Ext.data.Field({name:b});a.add(c);a.isDirty=true}if(d){c=a.get(d);if(c){a.remove(c);a.isDirty=true}}},applyStore:function(b){var e=this,i=e.getAssociatedModel(),f=e.getStoreName(),d=e.getForeignKey(),h=e.getPrimaryKey(),g=e.getFilterProperty(),c=e.getAutoLoad(),a=e.getAutoSync();return function(){var k=this,m,o,l,j={},n={addrecords:e.onAddRecords,removerecords:e.onRemoveRecords,scope:e};if(k[f]===undefined){if(g){o={property:g,value:k.get(g),exactMatch:true}}else{o={property:d,value:k.get(h),exactMatch:true}}j[d]=k.get(h);m=Ext.apply({},b,{model:i,filters:[o],remoteFilter:true,autoSync:a,modelDefaults:j});l=k[f]=Ext.create("Ext.data.Store",m);l.boundTo=k;l.onAfter(n);if(c){k[f].load()}}return k[f]}},onAddRecords:function(c,b){var e=b.length,f=c.boundTo.getId(),d,a;for(d=0;d<e;d++){a=b[d];a.set(this.getForeignKey(),f)}this.updateInverseInstances(c.boundTo)},onRemoveRecords:function(c,b){var e=b.length,d,a;for(d=0;d<e;d++){a=b[d];a.set(this.getForeignKey(),null)}},updateStore:function(a){this.getOwnerModel().prototype[this.getName()]=a},read:function(b,a,e){var d=b[this.getName()](),c=a.read(e).getRecords();d.add(c)},updateInverseInstances:function(b){var c=b[this.getName()](),a=this.getInverseAssociation();if(a){c.each(function(d){d[a.getInstanceName()]=b})}},getInverseAssociation:function(){var a=this.getOwnerModel().modelName;return this.getAssociatedModel().associations.findBy(function(b){return b.getType().toLowerCase()==="belongsto"&&b.getAssociatedModel().modelName===a})}},function(){Ext.deprecateProperty(this,"storeConfig","store")});