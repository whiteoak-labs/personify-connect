Ext.define("Ext.LoadMask",{extend:"Ext.Mask",xtype:"loadmask",config:{message:"Loading...",cls:Ext.baseCSSPrefix+"loading-mask",messageCls:Ext.baseCSSPrefix+"mask-message",indicator:true},getTemplate:function(){var a=Ext.baseCSSPrefix;return[{reference:"innerElement",cls:a+"mask-inner",children:[{reference:"indicatorElement",cls:a+"loading-spinner-outer",children:[{cls:a+"loading-spinner",children:[{tag:"span",cls:a+"loading-top"},{tag:"span",cls:a+"loading-right"},{tag:"span",cls:a+"loading-bottom"},{tag:"span",cls:a+"loading-left"}]}]},{reference:"messageElement"}]}]},updateMessage:function(b){var a=Ext.baseCSSPrefix+"has-message";if(b){this.addCls(a)}else{this.removeCls(a)}this.messageElement.setHtml(b)},updateMessageCls:function(b,a){this.messageElement.replaceCls(a,b)},updateIndicator:function(a){this[a?"removeCls":"addCls"](Ext.baseCSSPrefix+"indicator-hidden")}},function(){this.override({constructor:function(b,a){if(typeof a!=="undefined"){b=a;Ext.Logger.deprecate("You no longer need to pass an element to create a Ext.LoadMask. It is a component and can be shown using the Ext.Container.masked configuration.",this)}if(b){if(b.hasOwnProperty("msg")){b.message=b.msg;Ext.Logger.deprecate("'msg' config is deprecated, please use 'message' config instead",this);delete b.msg}if(b.hasOwnProperty("msgCls")){b.messageCls=b.msgCls;Ext.Logger.deprecate("'msgCls' config is deprecated, please use 'messageCls' config instead",this);delete b.msgCls}if(b.hasOwnProperty("store")){Ext.Logger.deprecate("'store' config has been removed. You can no longer bind a store to a Ext.LoadMask",this);delete b.store}}this.callParent([b])},bindStore:function(){Ext.Logger.deprecate("You can no longer bind a store to a Ext.LoadMask",this)}})});