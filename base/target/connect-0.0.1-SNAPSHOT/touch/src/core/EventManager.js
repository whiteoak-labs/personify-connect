Ext.ns("Ext.core");Ext.core.EventManager=Ext.EventManager={addListener:function(c,a,e,d,b){Ext.Logger.deprecate("Ext.EventManager.addListener is deprecated, use addListener() directly from an instance of Ext.Element instead",2);c.on(a,e,d,b)},removeListener:function(b,a,d,c){Ext.Logger.deprecate("Ext.EventManager.removeListener is deprecated, use removeListener() directly from an instance of Ext.Element instead",2);b.un(a,d,c)},removeAll:function(a){Ext.Logger.deprecate("Ext.EventManager.removeAll is deprecated, use clearListeners() directly from an instance of Ext.Element instead",3);Ext.get(a).clearListeners()},onDocumentReady:function(){Ext.Logger.deprecate("Ext.EventManager.onDocumentReady has been removed, please use Ext.onReady instead",3)},onWindowResize:function(c,b,a){Ext.Logger.deprecate("Ext.EventManager.onWindowResize is deprecated, attach listener to Ext.Viewport instead, i.e: Ext.Viewport.on('resize', ...)",2);Ext.Viewport.on("resize",c,b,a)},onOrientationChange:function(c,b,a){Ext.Logger.deprecate("Ext.EventManager.onOrientationChange is deprecated, attach listener to Ext.Viewport instead, i.e: Ext.Viewport.on('orientationchange', ...)",2);Ext.Viewport.on("orientationchange",c,b,a)},unOrientationChange:function(c,b,a){Ext.Logger.deprecate("Ext.EventManager.unOrientationChange is deprecated, remove listener from Ext.Viewport instead, i.e: Ext.Viewport.un('orientationchange', ...)",2);Ext.Viewport.un("orientationchange",c,b,a)}};Ext.EventManager.on=Ext.EventManager.addListener;Ext.EventManager.un=Ext.EventManager.removeListener;