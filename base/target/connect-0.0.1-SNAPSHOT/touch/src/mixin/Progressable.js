Ext.define("Ext.mixin.Progressable",{extend:"Ext.mixin.Mixin",isProgressable:true,mixinConfig:{id:"progressable"},config:{minProgressInput:0,maxProgressInput:1,minProgressOutput:0,maxProgressOutput:100,dynamic:true,state:null},_progressActive:false,_progress:0,_rawProgress:0,onStartProgress:Ext.emptyFn,onUpdateProgress:Ext.emptyFn,onEndProgress:Ext.emptyFn,startProgress:function(){if(!this._progressActive){this._progressActive=true;this.onStartProgress();this.updateProgress(this.getMinProgressInput())}},updateProgress:function(c,b){if(b&&b!=this.getState()){this.setState(b)}if(c>this.getMaxProgressInput()){c=this.getMaxProgressInput()}if(c<this.getMinProgressInput()){c=this.getMinProgressInput()}var a=this.mapValues(c,this.getMinProgressInput(),this.getMaxProgressInput(),this.getMinProgressOutput(),this.getMaxProgressOutput());this._progress=a;this._rawProgress=c;if(this.getDynamic()){this.onUpdateProgress(a)}},endProgress:function(){if(this._progressActive){this._progressActive=false;this.updateProgress(this.getMaxProgressInput());this.onEndProgress()}},mapValues:function(c,e,b,a,d){return(c-e)/(b-e)*(d-a)+a},setProgress:function(a){this.updateProgress(a)},getProgress:function(){return this._progress},getRawProgress:function(){return this._rawProgress}});