Ext.define("Ext.device.filesystem.Sencha",{extend:"Ext.device.filesystem.Abstract",requestFileSystem:function(a){if(!a.success){Ext.Logger.error("Ext.device.filesystem#requestFileSystem: You must specify a `success` callback.");return null}Ext.device.Communicator.send({command:"FileSystem#requestFileSystem",callbacks:{success:function(c){var b=Ext.create("Ext.device.filesystem.FileSystem",c);a.success.call(a.scope||this,b)},failure:function(b){if(a.failure){a.failure.call(a.scope||this,b)}}},scope:a.scope||this})}},function(){Ext.define("Ext.device.filesystem.FileSystem",{id:0,root:null,constructor:function(a){this.id=a;this.root=Ext.create("Ext.device.filesystem.DirectoryEntry","/",this)},getRoot:function(){return this.root}},function(){Ext.define("Ext.device.filesystem.Entry",{directory:false,path:0,fileSystem:null,constructor:function(a,c,b){this.directory=a;this.path=c;this.fileSystem=b},isFile:function(){return !this.directory},isDirectory:function(){return this.directory},getName:function(){var b=this.path.split("/");for(var a=b.length-1;a>=0;--a){if(b[a].length>0){return b[a]}}return"/"},getFullPath:function(){return this.path},getFileSystem:function(){return this.fileSystem},moveTo:function(a){if(a.parent==null){Ext.Logger.error("Ext.device.filesystem.Entry#moveTo: You must specify a new `parent` of the entry.");return null}var b=this;Ext.device.Communicator.send({command:"FileSystem#moveTo",path:this.path,fileSystemId:this.fileSystem.id,parentPath:a.parent.path,newName:a.newName,copy:a.copy,callbacks:{success:function(d){if(a.success){var c=b.directory?Ext.create("Ext.device.filesystem.DirectoryEntry",d,b.fileSystem):Ext.create("Ext.device.filesystem.FileEntry",d,b.fileSystem);a.success.call(a.scope||this,c)}},failure:function(c){if(a.failure){a.failure.call(a.scope||this,c)}}},scope:a.scope||this})},copyTo:function(a){this.moveTo(Ext.apply(a,{copy:true}))},remove:function(a){Ext.device.Communicator.send({command:"FileSystem#remove",path:this.path,fileSystemId:this.fileSystem.id,recursively:a.recursively,callbacks:{success:function(){if(a.success){a.success.call(a.scope||this)}},failure:function(b){if(a.failure){a.failure.call(a.scope||this,b)}}},scope:a.scope||this})},getParent:function(a){if(!a.success){Ext.Logger.error("Ext.device.filesystem.Entry#getParent: You must specify a `success` callback.");return null}var b=this;Ext.device.Communicator.send({command:"FileSystem#getParent",path:this.path,fileSystemId:this.fileSystem.id,callbacks:{success:function(d){var c=b.directory?Ext.create("Ext.device.filesystem.DirectoryEntry",d,b.fileSystem):Ext.create("Ext.device.filesystem.FileEntry",d,b.fileSystem);a.success.call(a.scope||this,c)},failure:function(c){if(a.failure){a.failure.call(a.scope||this,c)}}},scope:a.scope||this})}});Ext.define("Ext.device.filesystem.DirectoryEntry",{extend:"Ext.device.filesystem.Entry",constructor:function(b,a){this.callParent([true,b,a])},readEntries:function(a){if(!a.success){Ext.Logger.error("Ext.device.filesystem.DirectoryEntry#readEntries: You must specify a `success` callback.");return null}var b=this;Ext.device.Communicator.send({command:"FileSystem#readEntries",path:this.path,fileSystemId:this.fileSystem.id,callbacks:{success:function(d){var c=d.map(function(e){return e.directory?Ext.create("Ext.device.filesystem.DirectoryEntry",e.path,b.fileSystem):Ext.create("Ext.device.filesystem.FileEntry",e.path,b.fileSystem)});a.success.call(a.scope||this,c)},failure:function(c){if(a.failure){a.failure.call(a.scope||this,c)}}},scope:a.scope||this})},getFile:function(a){if(a.path==null){Ext.Logger.error("Ext.device.filesystem.DirectoryEntry#getFile: You must specify a `path` of the file.");return null}if(a.options==null){a.options={}}var b=this;Ext.device.Communicator.send({command:"FileSystem#getEntry",path:this.path,fileSystemId:this.fileSystem.id,newPath:a.path,directory:a.directory,create:a.options.create,exclusive:a.options.exclusive,callbacks:{success:function(d){if(a.success){var c=a.directory?Ext.create("Ext.device.filesystem.DirectoryEntry",d,b.fileSystem):Ext.create("Ext.device.filesystem.FileEntry",d,b.fileSystem);a.success.call(a.scope||this,c)}},failure:function(c){if(a.failure){a.failure.call(a.scope||this,c)}}},scope:a.scope||this})},getDirectory:function(a){this.getFile(Ext.apply(a,{directory:true}))},removeRecursively:function(a){this.remove(Ext.apply(a,{recursively:true}))}});Ext.define("Ext.device.filesystem.FileEntry",{extend:"Ext.device.filesystem.Entry",offset:0,constructor:function(b,a){this.callParent([false,b,a]);this.offset=0},getOffset:function(){return this.offset},seek:function(a){if(a.offset==null){Ext.Logger.error("Ext.device.filesystem.FileEntry#seek: You must specify an `offset` in the file.");return null}var b=this;Ext.device.Communicator.send({command:"FileSystem#seek",path:this.path,fileSystemId:this.fileSystem.id,offset:a.offset,callbacks:{success:function(c){b.offset=c;if(a.success){a.success.call(a.scope||this)}},failure:function(c){if(a.failure){a.failure.call(a.scope||this,c)}}},scope:a.scope||this})},read:function(a){var b=this;Ext.device.Communicator.send({command:"FileSystem#read",path:this.path,fileSystemId:this.fileSystem.id,offset:this.offset,length:a.length,callbacks:{success:function(c){b.offset=c.offset;if(a.success){a.success.call(a.scope||this,c.data)}},failure:function(c){if(a.failure){a.failure.call(a.scope||this,c)}}},scope:a.scope||this})},write:function(a){if(a.data==null){Ext.Logger.error("Ext.device.filesystem.FileEntry#write: You must specify a `data` for the file.");return null}var b=this;Ext.device.Communicator.send({command:"FileSystem#write",path:this.path,fileSystemId:this.fileSystem.id,offset:this.offset,data:a.data,callbacks:{success:function(c){b.offset=c;if(a.success){a.success.call(a.scope||this)}},failure:function(c){if(a.failure){a.failure.call(a.scope||this,c)}}},scope:a.scope||this})},truncate:function(a){if(a.size==null){Ext.Logger.error("Ext.device.filesystem.FileEntry#truncate: You must specify a `size` of the file.");return null}var b=this;Ext.device.Communicator.send({command:"FileSystem#truncate",path:this.path,fileSystemId:this.fileSystem.id,offset:this.offset,size:a.size,callbacks:{success:function(c){b.offset=c;if(a.success){a.success.call(a.scope||this)}},failure:function(c){if(a.failure){a.failure.call(a.scope||this,c)}}},scope:a.scope||this})}})})});