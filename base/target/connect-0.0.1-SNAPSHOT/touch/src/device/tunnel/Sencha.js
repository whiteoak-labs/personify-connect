Ext.define("Ext.device.tunnel.Sencha",{extend:"Ext.device.tunnel.Abstract",requires:["Ext.device.tunnel.Connection"],constructor:function(){var e=this,b,d,c;this.callSuper(arguments);var a=window.__tunnelMessages,f=window.__tunnelAppId;delete window.__tunnelAppId;this.appId=f;if(!f){throw new Error("window.__tunnelAppId is not set properly")}if(a&&a.length>0){for(b=0,d=a.length;b<d;b++){c=a[b];this.onReceived(JSON.parse(atob(c)))}}delete window.__tunnelMessages;window.__pushTunnelMessage=function(g){setTimeout(function(){e.onReceived(JSON.parse(atob(g)))},1)}},broadcast:function(a){var b=new Ext.Promise;Ext.device.Communicator.send({command:"Tunnel#connect",callbacks:{success:function(c){if(!c||c.length===0){b.reject({code:1,message:"There are no receivers for this connection"});return}b.fulfill(c)},failure:function(c){b.reject(c)}},message:a});return b},doSend:function(e,a,b,c){var d=new Ext.Promise;Ext.device.Communicator.send({command:"Tunnel#send",callbacks:{success:function(f){d.fulfill(f)},failure:function(f){d.reject(f)}},receiverId:e,foreground:c,message:btoa(JSON.stringify({id:a,appId:this.appId,message:b,foreground:c}))});return d}});