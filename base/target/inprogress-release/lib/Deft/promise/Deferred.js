Ext.define("Deft.promise.Deferred",{alternateClassName:["Deft.Deferred"],requires:["Deft.log.Logger","Deft.promise.Promise"],statics:{enableLogging:true,logMessage:function(a){if(Deft.promise.Deferred.enableLogging){return Deft.Logger.log(a)}}},id:null,constructor:function(a){if(a==null){a={}}this.id=a.id;this.state="pending";this.progress=void 0;this.value=void 0;this.progressCallbacks=[];this.successCallbacks=[];this.failureCallbacks=[];this.cancelCallbacks=[];this.promise=Ext.create("Deft.Promise",{id:this.id?"of "+this.id:null,deferred:this});return this},then:function(f){var h,i,k,a,c,j,b,d,g,e;if(Ext.isObject(f)){b=f.success,a=f.failure,c=f.progress,i=f.cancel,j=f.scope}else{b=arguments[0],a=arguments[1],c=arguments[2],i=arguments[3],j=arguments[4]}e=[b,a,c,i];for(d=0,g=e.length;d<g;d++){h=e[d];if(!(Ext.isFunction(h)||h===null||h===void 0)){Ext.Error.raise({msg:"Error while registering callback with "+this+": a non-function specified."})}}k=Ext.create("Deft.promise.Deferred",{id:"transformed result of "+this});this.register(this.wrapCallback(k,b,j,"success","resolve"),this.successCallbacks,"resolved",this.value);this.register(this.wrapCallback(k,a,j,"failure","reject"),this.failureCallbacks,"rejected",this.value);this.register(this.wrapCallback(k,i,j,"cancel","cancel"),this.cancelCallbacks,"cancelled",this.value);this.register(this.wrapProgressCallback(k,c,j),this.progressCallbacks,"pending",this.progress);Deft.promise.Deferred.logMessage("Returning "+(k.getPromise())+".");return k.getPromise()},otherwise:function(c,a){var b;if(Ext.isObject(c)){b=c,c=b.fn,a=b.scope}return this.then({failure:c,scope:a})},always:function(c,a){var b;if(Ext.isObject(c)){b=c,c=b.fn,a=b.scope}return this.then({success:c,failure:c,cancel:c,scope:a})},update:function(a){Deft.promise.Deferred.logMessage(""+this+" updated with progress: "+a);if(this.state==="pending"){this.progress=a;this.notify(this.progressCallbacks,a)}else{if(this.state!=="cancelled"){Ext.Error.raise({msg:"Error: this "+this+" has already been completed and cannot be modified."})}}},resolve:function(a){Deft.promise.Deferred.logMessage(""+this+" resolved with value: "+a);this.complete("resolved",a,this.successCallbacks)},reject:function(a){Deft.promise.Deferred.logMessage(""+this+" rejected with error: "+a);this.complete("rejected",a,this.failureCallbacks)},cancel:function(a){Deft.promise.Deferred.logMessage(""+this+" cancelled with reason: "+a);this.complete("cancelled",a,this.cancelCallbacks)},getPromise:function(){return this.promise},getState:function(){return this.state},toString:function(){if(this.id!=null){return"Deferred "+this.id}return"Deferred"},wrapCallback:function(b,f,c,e,d){var a;a=this;if(f!=null){Deft.promise.Deferred.logMessage("Registering "+e+" callback for "+a+".")}return function(i){var g;if(Ext.isFunction(f)){try{Deft.promise.Deferred.logMessage("Calling "+e+" callback registered for "+a+".");g=f.call(c,i);if(g instanceof Ext.ClassManager.get("Deft.promise.Promise")||g instanceof Ext.ClassManager.get("Deft.promise.Deferred")){Deft.promise.Deferred.logMessage(""+(b.getPromise())+" will be completed based on the "+g+" returned by the "+e+" callback.");g.then(Ext.bind(b.resolve,b),Ext.bind(b.reject,b),Ext.bind(b.update,b),Ext.bind(b.cancel,b))}else{Deft.promise.Deferred.logMessage(""+(b.getPromise())+" resolved with the value returned by the "+e+" callback: "+g+".");b.resolve(g)}}catch(h){if(Ext.Array.contains(["RangeError","ReferenceError","SyntaxError","TypeError"],h.name)){Deft.Logger.error("Error: "+e+" callback for "+a+" threw: "+(h.stack!=null?h.stack:h))}else{Deft.promise.Deferred.logMessage(""+(b.getPromise())+" rejected with the Error returned by the "+e+" callback: "+h)}b.reject(h)}}else{Deft.promise.Deferred.logMessage(""+(b.getPromise())+" resolved with the value: "+i+".");b[d](i)}}},wrapProgressCallback:function(b,d,c){var a;a=this;if(d!=null){Deft.promise.Deferred.logMessage("Registering progress callback for "+a+".")}return function(g){var e;if(Ext.isFunction(d)){try{Deft.promise.Deferred.logMessage("Calling progress callback registered for "+a+".");e=d.call(c,g);Deft.promise.Deferred.logMessage(""+(b.getPromise())+" updated with progress returned by the progress callback: "+e+".");b.update(e)}catch(f){Deft.Logger.error("Error: progress callback registered for "+a+" threw: "+(f.stack!=null?f.stack:f))}}else{Deft.promise.Deferred.logMessage(""+(b.getPromise())+" updated with progress: "+g);b.update(g)}}},register:function(d,a,c,b){if(Ext.isFunction(d)){if(this.state==="pending"){a.push(d);if(this.state===c&&b!==void 0){this.notify([d],b)}}else{if(this.state===c){this.notify([d],b)}}}},complete:function(c,b,a){if(this.state==="pending"){this.state=c;this.value=b;this.notify(a,b);this.releaseCallbacks()}else{if(this.state!=="cancelled"){Ext.Error.raise({msg:"Error: this "+this+" has already been completed and cannot be modified."})}}},notify:function(b,d){var e,c,a;for(c=0,a=b.length;c<a;c++){e=b[c];e(d)}},releaseCallbacks:function(){this.progressCallbacks=null;this.successCallbacks=null;this.failureCallbacks=null;this.cancelCallbacks=null}});