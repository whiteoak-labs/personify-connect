Ext.define("Ext.app.Application",{extend:"Ext.app.Controller",requires:["Ext.app.History","Ext.app.Profile","Ext.app.Router","Ext.app.Action"],config:{profiles:[],controllers:[],history:{},name:null,appFolder:"app",router:{},controllerInstances:[],profileInstances:[],currentProfile:null,launch:Ext.emptyFn,enableLoader:true,requires:[],themeVariationPrefix:Ext.baseCSSPrefix+"theme-variation-",themeVariationTransitionCls:null,themeVariation:null},constructor:function(a){a=a||{};Ext.applyIf(a,{application:this});this.initConfig(a);for(var b in a){this[b]=a[b]}if(a.autoCreateViewport){Ext.Logger.deprecate('[Ext.app.Application] autoCreateViewport has been deprecated in Sencha Touch 2. Please implement a launch function on your Application instead and use Ext.create("MyApp.view.Main") to create your initial UI.')}Ext.Loader.setConfig({enabled:true});Ext.require(this.getRequires(),function(){if(this.getEnableLoader()!==false){Ext.require(this.getProfiles(),this.onProfilesLoaded,this)}},this)},dispatch:function(e,d){e=e||{};Ext.applyIf(e,{application:this});e=Ext.factory(e,Ext.app.Action);if(e){var c=this.getCurrentProfile(),b=c?c.getNamespace():undefined,a=this.getController(e.getController(),b);if(a){if(d!==false){this.getHistory().add(e,true)}a.execute(e)}}},redirectTo:function(c){if(Ext.data&&Ext.data.Model&&c instanceof Ext.data.Model){var a=c;c=a.toUrl()}var b=this.getRouter().recognize(c);if(b){b.url=c;if(a){b.data={};b.data.record=a}return this.dispatch(b)}},control:function(h,d){d=d||this;var i=this.getEventDispatcher(),g=(d)?d.getRefs():{},c,e,b,f,a;for(c in h){if(h.hasOwnProperty(c)){f=h[c];a=g[c];if(a){c=a.selector||a}for(e in f){b=f[e];if(Ext.isString(b)){b=d[b]}i.addListener("component",c,e,b,d)}}}},getController:function(b,d){var f=this.getControllerInstances(),a=this.getName(),e=Ext.String.format,c;if(b instanceof Ext.app.Controller){return b}if(f[b]){return f[b]}else{c=e("{0}.controller.{1}",a,b);d=e("{0}.controller.{1}.{2}",a,d,b);return f[d]||f[c]}},onProfilesLoaded:function(){var b=this.getProfiles(),e=b.length,g=[],d=this.gatherDependencies(),f,c,a;for(c=0;c<e;c++){g[c]=Ext.create(b[c],{application:this});a=g[c].getDependencies();d=d.concat(a.all);if(g[c].isActive()&&!f){f=g[c];this.setCurrentProfile(f);this.setControllers(this.getControllers().concat(a.controller));this.setModels(this.getModels().concat(a.model));this.setViews(this.getViews().concat(a.view));this.setStores(this.getStores().concat(a.store))}}this.setProfileInstances(g);Ext.require(d,this.loadControllerDependencies,this)},loadControllerDependencies:function(){this.instantiateControllers();var g=this.getControllerInstances(),f=[],c=[],e,b,a,d;for(d in g){b=g[d];a=b.getStores();c=c.concat(a);f=f.concat(b.getModels().concat(b.getViews()).concat(a))}this.setStores(this.getStores().concat(c));Ext.require(f,this.onDependenciesLoaded,this)},onDependenciesLoaded:function(){var c=this,b=this.getCurrentProfile(),e=this.getLaunch(),d,a;this.instantiateStores();Ext.app.Application.appInstance=this;if(Ext.Router){Ext.Router.setAppInstance(this)}d=this.getControllerInstances();for(a in d){d[a].init(this)}if(b){b.launch()}e.call(c);for(a in d){if(d[a]&&!(d[a] instanceof Ext.app.Controller)){Ext.Logger.warn("The controller '"+a+"' doesn't have a launch method. Are you sure it extends from Ext.app.Controller?")}else{d[a].launch(this)}}c.redirectTo(window.location.hash.substr(1))},gatherDependencies:function(){var a=this.getModels().concat(this.getViews()).concat(this.getControllers());Ext.each(this.getStores(),function(b){if(Ext.isString(b)){a.push(b)}},this);return a},instantiateStores:function(){var b=this.getStores(),f=b.length,c,a,d,g,e;for(e=0;e<f;e++){c=b[e];if(Ext.data&&Ext.data.Store&&!(c instanceof Ext.data.Store)){if(Ext.isString(c)){d=c;a=Ext.ClassManager.classes[c];c={xclass:c};if(a.prototype.defaultConfig.storeId===undefined){g=d.split(".");c.id=g[g.length-1]}}b[e]=Ext.factory(c,Ext.data.Store)}}this.setStores(b)},instantiateControllers:function(){var e=this.getControllers(),d={},c=e.length,a,b;for(b=0;b<c;b++){a=e[b];d[a]=Ext.create(a,{application:this})}return this.setControllerInstances(d)},applyControllers:function(a){return this.getFullyQualified(a,"controller")},applyProfiles:function(a){return this.getFullyQualified(a,"profile")},applyName:function(a){var b;if(a&&a.match(/ /g)){b=a;a=a.replace(/ /g,"");Ext.Logger.warn('Attempting to create an application with a name which contains whitespace ("'+b+'"). Renamed to "'+a+'".')}return a},updateName:function(a){Ext.ClassManager.setNamespace(a+".app",this);if(!Ext.Loader.config.paths[a]){Ext.Loader.setPath(a,this.getAppFolder())}},applyRouter:function(a){return Ext.factory(a,Ext.app.Router,this.getRouter())},applyHistory:function(a){var b=Ext.factory(a,Ext.app.History,this.getHistory());b.on("change",this.onHistoryChange,this);return b},onHistoryChange:function(a){this.dispatch(this.getRouter().recognize(a),false)},updateThemeVariation:function(h,l){var f=Ext.getBody().getParent(),d=this.getThemeVariationPrefix()||"",k=this.getThemeVariationTransitionCls();if(Ext.isFunction(h)){h=h.call(this)}if(!Ext.isString(h)){Ext.Error.raise("Theme variation must be a String.'")}if(k){var g="",c=0,m=document.styleSheets[0].cssRules,e,j,a,b;f.addCls(k);for(e in m){j=m[e];if(j.selectorText&&j.selectorText.indexOf("."+k)>=1){g+=j.cssText}}a=g.match(/[0-9]+s/g);for(e in a){b=parseInt(a[e]);if(b>c){c=b}}if(this.$themeVariationChangeTimeout){clearTimeout(this.$themeVariationChangeTimeout);this.$themeVariationChangeTimeout=null}this.$themeVariationChangeTimeout=Ext.defer(function(){f.removeCls(k)},b*1000)}f.removeCls(d+l);f.addCls(d+h)}},function(){Ext.regApplication=function(b){Ext.Logger.deprecate("[Ext.app.Application] Ext.regApplication() is deprecated, please replace it with Ext.application()");var a=b.name,c=Ext.String.format;Ext.ns(a,c("{0}.controllers",a),c("{0}.models",a),c("{0}.views",a));Ext.application(b)};Ext.define("Ext.data.ProxyMgr",{singleton:true,registerType:function(b,a){Ext.Logger.deprecate('Ext.data.ProxyMgr no longer exists - instead of calling Ext.data.ProxyMgr.registerType just update your custom Proxy class to set alias: "proxy.'+b+'"');Ext.ClassManager.setAlias(a,"proxy."+b)}});Ext.reg=function(b,a){Ext.Logger.deprecate('Ext.reg is deprecated, please set xtype: "'+b+'" directly in your subclass instead');Ext.ClassManager.setAlias(a,b)};Ext.redirect=function(){var a=Ext.app.Application.appInstance;Ext.Logger.deprecate("[Ext.app.Application] Ext.redirect is deprecated, please use YourApp.redirectTo instead");if(a){a.redirectTo.apply(a,arguments)}};Ext.dispatch=function(){var a=Ext.app.Application.appInstance;Ext.Logger.deprecate("[Ext.app.Application] Ext.dispatch is deprecated, please use YourApp.dispatch instead");if(a){a.dispatch.apply(a,arguments)}}});